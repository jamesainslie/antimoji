name: Maintenance

on:
  schedule:
    # Run weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:

env:
  GO_VERSION: '1.23'

jobs:
  dependency-update:
    name: Dependency Update Check
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Check for dependency updates
      run: |
        echo "## Dependency Update Report" >> $GITHUB_STEP_SUMMARY
        echo "Date: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # List current dependencies
        echo "### Current Dependencies" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        go list -m all >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

        # Check for updates
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Available Updates" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        go list -u -m all | grep -E '\[.*\]' || echo "No updates available" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Test with latest dependencies
      run: |
        # Create a test branch for dependency updates
        cp go.mod go.mod.backup
        cp go.sum go.sum.backup

        # Update dependencies
        go get -u ./...
        go mod tidy

        # Test with updated dependencies
        if go test ./...; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Tests pass with updated dependencies" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ Tests fail with updated dependencies" >> $GITHUB_STEP_SUMMARY
        fi

        # Restore original dependencies
        mv go.mod.backup go.mod
        mv go.sum.backup go.sum

  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run vulnerability check
      run: |
        echo "## Vulnerability Scan Report" >> $GITHUB_STEP_SUMMARY
        echo "Date: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if govulncheck ./... > vuln_output.txt 2>&1; then
          echo "✅ No vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Vulnerabilities detected:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat vuln_output.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi

  code-quality-audit:
    name: Code Quality Audit
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install quality tools
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        go install honnef.co/go/tools/cmd/staticcheck@latest
        go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

    - name: Generate quality report
      run: |
        echo "## Code Quality Audit Report" >> $GITHUB_STEP_SUMMARY
        echo "Date: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Test coverage
        echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
        go test ./... -coverprofile=coverage.out
        COVERAGE=$(go tool cover -func=coverage.out | tail -1 | awk '{print $3}')
        echo "Overall coverage: $COVERAGE" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Cyclomatic complexity
        echo "### Cyclomatic Complexity" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        gocyclo -over 10 . | head -20 >> $GITHUB_STEP_SUMMARY || echo "All functions have acceptable complexity" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Lines of code
        echo "### Code Metrics" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*" | xargs wc -l | tail -1 >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  build-artifacts:
    name: Build Development Artifacts
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: latest
        install-only: true

    - name: Build development snapshot
      run: |
        goreleaser build --snapshot --clean

    - name: Test all binaries
      run: |
        echo "## Development Build Test" >> $GITHUB_STEP_SUMMARY
        echo "Date: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Architecture | Binary Size | Version Check |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------------|-------------|---------------|" >> $GITHUB_STEP_SUMMARY

        find dist/ -name "antimoji*" -type f -executable | while read binary; do
          platform=$(echo "$binary" | cut -d'_' -f3)
          arch=$(echo "$binary" | cut -d'_' -f4 | cut -d'/' -f1)
          size=$(ls -lh "$binary" | awk '{print $5}')

          if [[ "$binary" == *"windows"* ]]; then
            echo "| $platform | $arch | $size | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            chmod +x "$binary"
            if "$binary" version >/dev/null 2>&1; then
              echo "| $platform | $arch | $size | ✅ Working |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $platform | $arch | $size | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done

    - name: Upload development artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nightly-build-${{ github.sha }}
        path: dist/
        retention-days: 7
