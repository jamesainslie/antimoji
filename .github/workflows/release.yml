name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Run tests
      run: |
        go mod download
        go test ./...

    - name: Run antimoji linter
      run: |
        make build
        make antimoji-lint

  release:
    name: Release with GoReleaser
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: goreleaser-artifacts
        path: dist/
        retention-days: 90

    - name: Generate release summary
      run: |
        echo "## Release ${{ github.ref_name }} Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Packages Built" >> $GITHUB_STEP_SUMMARY
        echo "- Linux (amd64, arm64)" >> $GITHUB_STEP_SUMMARY
        echo "- macOS (amd64, arm64)" >> $GITHUB_STEP_SUMMARY
        echo "- Windows (amd64)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Distribution Channels" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub Releases" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Hub (ghcr.io)" >> $GITHUB_STEP_SUMMARY
        echo "- Homebrew Tap" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Quality Assurance" >> $GITHUB_STEP_SUMMARY
        echo "- All tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- Security scan completed" >> $GITHUB_STEP_SUMMARY
        echo "- Cross-platform builds verified" >> $GITHUB_STEP_SUMMARY

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  homebrew:
    name: Update Homebrew Tap
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Check out homebrew tap
      uses: actions/checkout@v4
      with:
        repository: jamesainslie/homebrew-antimoji
        token: ${{ secrets.GITHUB_TOKEN }}
        path: homebrew-tap

    - name: Update Homebrew formula
      run: |
        cd homebrew-tap

        # Extract version from tag (remove 'v' prefix)
        VERSION="${{ github.ref_name }}"
        VERSION_NUMBER="${VERSION#v}"

        echo "Updating Homebrew formula to version $VERSION_NUMBER"

        # Download binaries and calculate checksums
        curl -sL "https://github.com/jamesainslie/antimoji/releases/download/$VERSION/antimoji-$VERSION-darwin-amd64" -o darwin-amd64
        curl -sL "https://github.com/jamesainslie/antimoji/releases/download/$VERSION/antimoji-$VERSION-darwin-arm64" -o darwin-arm64
        curl -sL "https://github.com/jamesainslie/antimoji/releases/download/$VERSION/antimoji-$VERSION-linux-amd64" -o linux-amd64
        curl -sL "https://github.com/jamesainslie/antimoji/releases/download/$VERSION/antimoji-$VERSION-linux-arm64" -o linux-arm64

        DARWIN_AMD64_SHA=$(shasum -a 256 darwin-amd64 | cut -d' ' -f1)
        DARWIN_ARM64_SHA=$(shasum -a 256 darwin-arm64 | cut -d' ' -f1)
        LINUX_AMD64_SHA=$(shasum -a 256 linux-amd64 | cut -d' ' -f1)
        LINUX_ARM64_SHA=$(shasum -a 256 linux-arm64 | cut -d' ' -f1)

        # Update the formula
        sed -i "s/version \".*\"/version \"$VERSION_NUMBER\"/" Formula/antimoji.rb
        sed -i "s|releases/download/v[^/]*/|releases/download/$VERSION/|g" Formula/antimoji.rb
        sed -i "s|antimoji-v[^-]*-|antimoji-$VERSION-|g" Formula/antimoji.rb
        sed -i "0,/sha256 \".*\"/s//sha256 \"$DARWIN_AMD64_SHA\"/" Formula/antimoji.rb
        sed -i "0,/sha256 \".*\"/s//sha256 \"$DARWIN_ARM64_SHA\"/" Formula/antimoji.rb
        sed -i "0,/sha256 \".*\"/s//sha256 \"$LINUX_AMD64_SHA\"/" Formula/antimoji.rb
        sed -i "0,/sha256 \".*\"/s//sha256 \"$LINUX_ARM64_SHA\"/" Formula/antimoji.rb

        # Commit and push changes
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add Formula/antimoji.rb
        git commit -m "feat: update antimoji to $VERSION

        - Update version to $VERSION_NUMBER
        - Update download URLs for $VERSION release
        - Update SHA256 checksums for all platforms
        - Automated update from release workflow"
        git push

        echo "‚úÖ Homebrew formula updated to $VERSION"
      continue-on-error: true

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [release, homebrew]
    if: always()

    steps:
    - name: Release notification
      run: |
        echo "üöÄ Antimoji ${{ github.ref_name }} has been released!"
        echo "üì¶ Packages available on GitHub Releases"
        echo "üê≥ Docker images published to GHCR"
        echo "üç∫ Homebrew formula updated"
