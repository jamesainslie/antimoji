# golangci-lint configuration for Antimoji
# High-performance emoji detection CLI tool

run:
  # Timeout for analysis
  timeout: 5m
  
  # Include test files in analysis
  tests: true
  
  # Skip generated files
  skip-files:
    - ".*\\.pb\\.go$"
    - ".*_mock\\.go$"
    - ".*_gen\\.go$"
  
  # Skip directories
  skip-dirs:
    - vendor
    - test/fixtures
    - .git

# Output configuration
output:
  # Colored output
  color: always
  
  # Output format (colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions)
  format: colored-line-number
  
  # Print lines of code with issue
  print-issued-lines: true
  
  # Print linter name in the end of issue text
  print-linter-name: true
  
  # Make issues output unique by line
  uniq-by-line: true
  
  # Sort results by: filepath, line and column
  sort-results: true

# Linters configuration
linters:
  # Disable all linters by default
  disable-all: true
  
  # Enable specific linters
  enable:
    # Error detection
    - errcheck          # Check for unchecked errors
    - gosimple         # Simplify code
    - govet            # Vet examines Go source code
    - ineffassign      # Detect ineffectual assignments
    - staticcheck      # Staticcheck is a go vet on steroids
    - typecheck        # Type-check Go code
    - unused           # Check for unused constants, variables, functions and types
    
    # Code complexity
    - gocyclo          # Computes and checks the cyclomatic complexity
    - gocognit         # Computes and checks the cognitive complexity
    - nestif           # Reports deeply nested if statements
    - funlen           # Tool for detection of long functions
    
    # Code style
    - gofmt            # Check whether code was gofmt-ed
    - goimports        # Check import statements are formatted according to the 'goimport' command
    - misspell         # Find commonly misspelled English words in comments
    - unconvert        # Remove unnecessary type conversions
    - whitespace       # Tool for detection of leading and trailing whitespace
    - wsl              # Whitespace Linter - Forces you to use empty lines!
    
    # Performance
    - prealloc         # Find slice declarations that could potentially be preallocated
    - bodyclose        # Check whether HTTP response body is closed successfully
    - noctx            # Find sending http request without context.Context
    
    # Security
    - gosec            # Inspects source code for security problems
    - sqlclosecheck    # Check that sql.Rows and sql.Stmt are closed
    - rowserrcheck     # Check whether Err of rows is checked successfully
    
    # Best practices
    - gocritic         # Provides diagnostics that check for bugs, performance and style issues
    - goconst          # Find repeated strings that could be replaced by a constant
    - goheader         # Check file header
    - gomnd            # An analyzer to detect magic numbers
    - goprintffuncname # Check that printf-like functions are named with `f` at the end
    - nolintlint       # Reports ill-formed or insufficient nolint directives
    - exportloopref    # Check for pointers to enclosing loop variables
    - exhaustive       # Check exhaustiveness of enum switch statements
    - makezero         # Find slice declarations with non-zero initial length
    
    # Documentation
    - godot            # Check if comments end in a period
    - godox            # Tool for detection of FIXME, TODO and other comment keywords
    
    # Import organization
    - gci              # Control golang package import order and make it always deterministic
    
    # Naming conventions
    - revive           # Fast, configurable, extensible, flexible, and beautiful linter for Go

# Linter-specific settings
linters-settings:
  # Cyclomatic complexity
  gocyclo:
    min-complexity: 10
    
  # Cognitive complexity
  gocognit:
    min-complexity: 15
    
  # Function length
  funlen:
    lines: 80
    statements: 40
    
  # Nested if statements
  nestif:
    min-complexity: 4
    
  # Magic numbers
  gomnd:
    settings:
      mnd:
        # List of numbers to exclude from analysis
        ignored-numbers: 0,1,2,3
        # List of file patterns to exclude from analysis
        ignored-files: test/*.go,*_test.go
        # List of function patterns to exclude from analysis
        ignored-functions: math.*,http.StatusText,time.Unix
        
  # Security scanner
  gosec:
    # Select a subset of rules to run
    includes:
      - G101 # Look for hard coded credentials
      - G102 # Bind to all interfaces
      - G103 # Audit the use of unsafe block
      - G104 # Audit errors not checked
      - G105 # Audit the use of math/big.Int.Exp
      - G106 # Audit the use of ssh.InsecureIgnoreHostKey
      - G107 # Url provided to HTTP request as taint input
      - G108 # Profiling endpoint automatically exposed on /debug/pprof
      - G109 # Potential Integer overflow made by strconv.Atoi result conversion to int16/32
      - G110 # Potential DoS vulnerability via decompression bomb
      - G201 # SQL query construction using format string
      - G202 # SQL query construction using string concatenation
      - G203 # Use of unescaped data in HTML templates
      - G204 # Audit use of command execution
      - G301 # Poor file permissions used when creating a directory
      - G302 # Poor file permissions used with chmod
      - G303 # Creating tempfile using a predictable path
      - G304 # File path provided as taint input
      - G305 # File traversal when extracting zip/tar archive
      - G306 # Poor file permissions used when writing to a new file
      - G307 # Deferring a method which returns an error
      - G401 # Detect the usage of DES, RC4, MD5 or SHA1
      - G402 # Look for bad TLS connection settings
      - G403 # Ensure minimum RSA key length of 2048 bits
      - G404 # Insecure random number source (rand)
      - G501 # Import blocklist: crypto/md5
      - G502 # Import blocklist: crypto/des
      - G503 # Import blocklist: crypto/rc4
      - G504 # Import blocklist: net/http/cgi
      - G505 # Import blocklist: crypto/sha1
      - G601 # Implicit memory aliasing of items from a range statement
    # Exclude generated files
    excludes:
      - G104 # Exclude unchecked errors in test files
    # Set the severity for rules
    severity: medium
    # Set the confidence for rules  
    confidence: medium
    
  # Code critic
  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks'
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc
      - importShadow # not important for now
      - unnamedResult # not important for now
      - hugeParam # not important for now
      
  # Constants detection
  goconst:
    min-len: 2
    min-occurrences: 2
    ignore-tests: false
    match-constant: true
    numbers: false
    min: 3
    max: 3
    
  # Imports formatting
  goimports:
    local-prefixes: github.com/antimoji/antimoji
    
  # Import control
  gci:
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - prefix(github.com/antimoji/antimoji) # Custom section: groups all imports with the specified Prefix.
      - blank # Blank section: contains all blank imports.
      - dot # Dot section: contains all dot imports.
    custom-order: true
    
  # Revive configuration
  revive:
    min-confidence: 0.8
    rules:
      - name: blank-imports
      - name: context-as-argument
      - name: context-keys-type
      - name: dot-imports
      - name: error-return
      - name: error-strings
      - name: error-naming
      - name: exported
      - name: if-return
      - name: increment-decrement
      - name: var-naming
      - name: var-declaration
      - name: package-comments
      - name: range
      - name: receiver-naming
      - name: time-naming
      - name: unexported-return
      - name: indent-error-flow
      - name: errorf
      - name: empty-block
      - name: superfluous-else
      - name: unused-parameter
      - name: unreachable-code
      - name: redefines-builtin-id
      
  # Preallocation check
  prealloc:
    simple: true
    range-loops: true
    for-loops: false
    
  # Whitespace linter
  wsl:
    # Allow declarations (var) to be cuddled
    allow-assign-and-call: true
    allow-multiline-assign: true
    allow-separated-leading-comment: false
    allow-trailing-comment: false
    force-case-trailing-whitespace: 0
    force-err-cuddling: false
    force-short-decl-cuddling: false
    strict-append: true

# Issues configuration
issues:
  # List of regexps of issue texts to exclude
  exclude:
    # Exclude some linters from running on tests files
    - "G104: Errors unhandled" # Allow unhandled errors in tests
    - "exported .* should have comment or be unexported"
    - "comment on exported .* should be of the form"
    
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - gomnd
        - goconst
        - funlen
        - gocognit
        - gocyclo
        - dupl
        - gosec
        
    # Exclude some linters from running on main.go
    - path: cmd/antimoji/main\.go
      linters:
        - gochecknoinits
        
    # Exclude magic number detection in configuration files
    - path: internal/config/
      linters:
        - gomnd
        
    # Allow long lines in generated files
    - path: \.pb\.go
      linters:
        - lll
        
    # Exclude certain linters for specific files
    - path: internal/types/result\.go
      linters:
        - unused # Result type might have unused methods for completeness
        
  # Independently of option `exclude` we use default exclude patterns
  exclude-use-default: false
  
  # Show only new issues created after git revision `REV`
  # new-from-rev: HEAD~1
  
  # The default value is false. If set to true exclude and exclude-rules
  # regular expressions become case sensitive.
  exclude-case-sensitive: false
  
  # The list of ids of default excludes to include or disable
  include:
    - EXC0002 # disable excluding of issues about comments from golint
    
  # Maximum issues count per one linter. Set to 0 to disable
  max-issues-per-linter: 0
  
  # Maximum count of issues with the same text. Set to 0 to disable
  max-same-issues: 0
  
  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed
  new: false
  
  # Fix found issues (if it's supported by the linter)
  fix: false

# Severity configuration
severity:
  # Default severity for issues
  default-severity: error
  
  # The default value is false
  case-sensitive: false
  
  # Default value is empty list
  rules:
    - linters:
        - revive
      severity: warning
