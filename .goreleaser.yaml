# GoReleaser configuration for Antimoji
# High-performance emoji detection and removal CLI tool

version: 2

# Project information
project_name: antimoji

# Environment variables
env:
  - GO111MODULE=on
  - CGO_ENABLED=0

# Git configuration
git:
  tag_sort: -version:refname

# Build configuration
builds:
  - id: antimoji
    main: ./cmd/antimoji
    binary: antimoji

    # Build flags
    flags:
      - -trimpath

    # LD flags for version information
    ldflags:
      - -s -w
      - -X main.version={{.Version}}
      - -X main.buildTime={{.Date}}
      - -X main.gitCommit={{.Commit}}

    # Target platforms
    goos:
      - linux
      - windows
      - darwin

    goarch:
      - amd64
      - arm64

    # Ignore combinations
    ignore:
      - goos: windows
        goarch: arm64

# Archive configuration
archives:
  - id: antimoji
    name_template: "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
    files:
      - README.md
      - LICENSE
      - CHANGELOG.md

# Checksum configuration
checksum:
  name_template: "{{ .ProjectName }}_{{ .Version }}_checksums.txt"
  algorithm: sha256

# Snapshot configuration (for development builds)
snapshot:
  version_template: "{{ .Version }}-SNAPSHOT-{{ .ShortCommit }}"

# Changelog configuration
changelog:
  use: github
  sort: asc
  abbrev: 0
  groups:
    - title: Features
      regexp: "^.*feat[(\\w)]*:+.*$"
      order: 0
    - title: Bug Fixes
      regexp: "^.*fix[(\\w)]*:+.*$"
      order: 1
    - title: Performance
      regexp: "^.*perf[(\\w)]*:+.*$"
      order: 2
    - title: Documentation
      regexp: "^.*docs[(\\w)]*:+.*$"
      order: 3
    - title: Others
      order: 999
  filters:
    exclude:
      - "^test:"
      - "^chore:"
      - "^ci:"

# Release configuration
release:
  github:
    owner: jamesainslie
    name: antimoji

  header: |
    ## Antimoji {{ .Version }}

    High-performance emoji detection and removal CLI tool.

    ### Installation

    #### Binary Download
    Download the appropriate binary for your platform from the assets below.

    #### Package Managers
    ```bash
    # macOS (Homebrew)
    brew install antimoji/tap/antimoji

    # Go Install
    go install github.com/jamesainslie/antimoji/cmd/antimoji@{{ .Version }}

    # Docker
    docker pull ghcr.io/jamesainslie/antimoji:{{ .Version }}
    ```

    ### Usage
    ```bash
    # Scan for emojis
    antimoji scan .

    # Remove emojis safely
    antimoji clean --backup --in-place .

    # High-performance scanning
    antimoji scan --workers 8 --stats .
    ```

  footer: |
    **Full Changelog**: https://github.com/jamesainslie/antimoji/compare/{{ .PreviousTag }}...{{ .Tag }}

    ---

    Built with Go 1.21+

# Homebrew tap (for macOS) - using PAT token for proper permissions
brews:
  - name: antimoji
    repository:
      owner: jamesainslie
      name: homebrew-antimoji
      token: "{{ .Env.PAT_TOKEN }}"
      branch: main
    homepage: https://github.com/jamesainslie/antimoji
    description: High-performance emoji detection and removal CLI tool
    license: MIT

    # Skip existing releases to avoid conflicts
    skip_upload: auto

    # Custom install script to handle tarball extraction
    install: |
      bin.install "antimoji"

    # Test that includes basic functionality
    test: |
      system "#{bin}/antimoji", "version"

      # Test basic functionality
      (testpath/"test.txt").write("Hello world! ðŸ˜€")
      output = shell_output("#{bin}/antimoji scan #{testpath}/test.txt")
      assert_match "1", output

    # Custom caveats with setup-lint documentation
    caveats: |
      Antimoji is a high-performance emoji detection and removal tool.

      Basic usage:
        antimoji scan .                    # Scan for emojis
        antimoji clean --backup .          # Remove emojis with backup
        antimoji generate --type=ci-lint . # Generate allowlist config
        antimoji setup-lint --mode=zero-tolerance  # Setup automated linting

      Documentation: https://github.com/jamesainslie/antimoji

    # Commit message template
    commit_msg_template: "feat: update {{ .ProjectName }} to {{ .Tag }}

    - Update version to {{ .Version }}
    - Update download URLs for {{ .Tag }} release
    - Update SHA256 checksums for all platforms
    - Automated update from GoReleaser"

# Docker images are built separately in workflow with multi-stage Dockerfile
# This avoids conflicts and ensures proper binary compilation
# dockers:
#   - image_templates:
#       - "ghcr.io/jamesainslie/antimoji:{{ .Version }}"
#       - "ghcr.io/jamesainslie/antimoji:latest"
#     dockerfile: Dockerfile
#     build_flag_templates:
#       - "--pull"
#       - "--label=org.opencontainers.image.created={{.Date}}"
#       - "--label=org.opencontainers.image.title={{.ProjectName}}"
#       - "--label=org.opencontainers.image.revision={{.FullCommit}}"
#       - "--label=org.opencontainers.image.version={{.Version}}"
#       - "--label=org.opencontainers.image.source=https://github.com/jamesainslie/antimoji"
#     use: buildx
#     goos: linux
#     goarch: amd64

# Validation hooks
before:
  hooks:
    - go mod tidy
    - go test ./...
